
; Useful definitions
#define msec *8388608/I10

; Set up pins 1 to 8 as outputs (Turbo PMAC User Manual p197-> )
; This should probably eventually be placed in PLC1 or some other
; configuration PLC as the PMAC wakes up with these defined as inputs
; by default after reset or power down.
M32=$FF		; Pin direction control
M33=$FF		; Buffer direction control 

; Starting with the recommended procedure from the Quick Reference p62.
CLOSE
DELETE GATHER
DELETE TRACE

;###########################################################################################
; PLC 9 to test the scan rate both in software and in hardware
; This PLC will toggle PIN1 of the JIO general purpose digital IO port (J3)
; and update a variable with the deltatime to a allow a soft readout
; of the scan time.

#define timer14 I(5111+(14&30)*50+14%2)	; defining timer register for PLC 9 after DLS convention
#define latchtimer P1401	; Use this variable to latch the timer every PLC cycle
#define deltatime  P1400 	; time diff between this and last PLC cycle. 
							; Read this variable from the IOC.

OPEN PLC 9 CLEAR
	; get the plc scan time
	deltatime = (latchtimer - timer14) msec
	latchtimer = timer14
	
	; Do the toggle with an XOR (M3 = M3 XOR 1)
	M3^=1
CLOSE



;###########################################################################################
;
;          PLC 15 does actual position compare output.
;
;	05-05-2008 Ulrik Pedersen
;
; The position compare only happens withing a user configurable range of interest.
; One digital line will act as a gate output and go HIGH when the motor is within
; the specified range of interest.
; One digital line can be used as gate input to force the comparison even if
; the motor is outside ROI. Whether to use this line or not is user configurable.
;
; Two main modes of trigger output operation:
;    1. Toggle mode. At each position compare match the output signal just toggles.
;    2. Pulse mode. One HIGH pulse is output at the compare match. The length of
;       of the pulse is user configurable.

; ------- Definitions of used PMAC resources --------
; NOTE: These resources (digital IO) should be negotiated
; with other PLC applications that might use them on the PMAC
; This application will require: 3 outputs and 1 input
#define gate_out              M0
#define trig_out              M1
#define scan_out              M2
#define ext_gate_in           M8
#define out_buf_dir_ctrl     M33
#define out_pin_dir_ctrl     M32
#define in_buf_dir_ctrl      M35
#define in_pin_dir_ctrl      M34

; ------- Definitions of variables -------
#define state              P1501     ; This contain the state of the PLC.
#define cmd                P1502     ; Commands from the IOC to the PLC
#define gate               P1503     ; Different modes of gate operation:
                                     ; 0 = Gate on position compared with hi_roi and lo_roi
                                     ; 1 = External input. Gate on digital input line
                                     ; 2 = Software: IOC write to ROI to set whether or not to start output.
#define pulse              P1504     ; 0 = Toggle the output signal (default)
                                     ; 1 = Pulse the output compare match with pulsewidth
#define pulsewidth         P1505     ; Width of pulse in Pulsed MODE (units?)
#define roi                P1506     ; 0 = Not in Range Of Interest
                                     ; 1 = In Range Of Interest
#define lo_roi             P1507     ; Lowest ROI position
#define hi_roi             P1508     ; Highest ROI position
#define stepsize           P1509     ; Number of counts between pulses
#define motor              P1510     ; PMAC axis #
#define direction          P1511     ; Direction indicator. The PLC will set this variable on a compare match

; Internal variables to the PLC
#define match              P1520     ; A compare match was found (TRUE/FALSE). 
#define position           P1521     ; Position calculated from M variables as described in Quick Ref. p.40
#define next_pos_cmp       P1522     ; Next comparison in the positive direction.
#define next_neg_cmp       P1523     ; Next comparison in the negative direction.

; ------- Definitions of states -------
#define ST_INIT               0      ; Configure the output and input PINs.
#define ST_QUIT               1      ; When user stops the app. clean up and 
                                     ; disable PLC in this state
#define ST_OUT_ROI            2      ; Outside of ROI but actively comparing position
                                     ; with hi_roi and lo_roi
#define ST_IN_ROI             3      ; In ROI and outputting trigger pulses
#define ST_PULSE              4      ; Waiting for timer to pull down pulse

; ------- Definitions of commands from IOC -------
#define CMD_ENABLE            1      ; Start the PLC
#define CMD_DISABLE           2      ; Quit the PLC

; ------- Definitions of gate operation -------
#define GT_POS                0      ; Gate on position compared with hi_roi and lo_roi
#define GT_EXT                1      ; External input. Gate on digital input line
#define GT_SW                 2      ; Software: IOC write to ROI to set whether or not to start output.

; ------- Definitions of output pulse operation modes -------
#define PLS_TOGGLE            0
#define PLS_PULSE             1

; ------- Definitions to make code readable -------
#define timer15           I(5111+(15&30)*50+15%2)
#define POSITIVE              1
#define NEGATIVE              0
#define HIGH                  1
#define LOW                   0
#define TRUE                  1       
#define FALSE                 0

; -------- PLC begin here --------------------------
OPEN PLC 10 CLEAR
	; Very first thing: read commands from the IOC here
	if (cmd = CMD_DISABLE)
		state = ST_QUIT
	endif
	
	scan_out ^= HIGH                  ; Toggle the scan output. This can be used as a "heart beat"
	                                  ; and help debug and optimise the PLC.
	                                  
	; Second thing latch position in counts
	; Calculation comes from Quick Ref. p.40 (but we're ignoring the handweel offset)
	position = ( M(motor*100+62) + M(motor*100+64) + M(motor*100+69) )/( I(motor*100+8) * 32)
	
	if (state = ST_INIT)
		cmd = CMD_ENABLE
		out_pin_dir_ctrl = $FF        ; Pin direction control set to output
		out_buf_dir_ctrl = $FF        ; Buffer direction control set to output
		in_pin_dir_ctrl  = $00        ; Pin direction control set to output
		in_buf_dir_ctrl  = $00        ; Buffer direction control set to output
		gate_out = LOW                ; Init gate output to LOW
		trig_out = LOW                ; Init pulse output to LOW
		scan_out = LOW                ; Init scan output to LOW
		state = ST_OUT_ROI            ; Next state

	else if (state = ST_OUT_ROI)
		; Check if position is within ROI for one reason or another
		if (gate = GT_POS and position !< lo_roi and position !> hi_roi)
		or (gate = GT_EXT and ext_gate_in = HIGH)
		or (gate = GT_SW and roi = HIGH)
			state = ST_IN_ROI
			gate_out = HIGH
			roi = HIGH
		endif
		
	else if (state = ST_IN_ROI)
		if (position !< next_pos_cmp)
			match = TRUE
			next_neg_cmp = next_pos_cmp - stepsize
			next_pos_cmp = next_pos_cmp + stepsize
			direction = POSITIVE
		else if (position !> next_neg_cmp)
			match = TRUE
			next_pos_cmp = next_neg_cmp + stepsize
			next_neg_cmp = next_neg_cmp - stepsize
			direction = NEGATIVE
		endif endif
		
		if (match = TRUE)
			if (pulse = PLS_TOGGLE)
				trig_out ^= HIGH                ; Toggle the trigger output
			else if (pulse = PLS_PULSE)
				trig_out = HIGH                 ; Set the trigger output high (and let timer reset it)
				timer15 = pulsewidth msec
				state = ST_PULSE
			endif endif
			
			match = FALSE
		endif
		
		; Check if position has moved outside of ROI
		if (gate = GT_POS)
			if (position !> lo_roi or position !< hi_roi)
				state = ST_OUT_ROI
				gate_out = LOW
				roi = LOW
			endif
		else if (gate = GT_EXT and ext_gate_in = LOW)
		or      (gate = GT_SW and roi = LOW)
			state = ST_OUT_ROI
			gate_out = LOW
			roi = LOW
		endif endif
		
	else if (state = ST_PULSE)
		; Just wait for timer to count down or user to abort
		while (timer15 > 0)
		and   (cmd != CMD_DISABLE)
		endw
		if (timer15 !> 0)
			trig_out = LOW
		endif
		if (cmd = CMD_DISABLE)
			state = ST_QUIT
		else
			state = ST_IN_ROI
		endif
		
	else if (state = ST_QUIT)
		out_pin_dir_ctrl=$00                    ; Pin direction control to input for safety
		out_buf_dir_ctrl=$00                    ; Buffer direction control to input for safety 
		cmd = CMD_DISABLE
		DISABLE PLC 10
	endif endif endif endif endif

CLOSE
DISABLE PLC 10
; -------- PLC end here ----------------------------


