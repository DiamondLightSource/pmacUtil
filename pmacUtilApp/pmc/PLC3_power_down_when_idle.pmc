CLOSE

;###########################################################
; PLC3_power_down_when_idle.pmc
; Original Author: Pete Leicester
;
; PLC to kill or reduce power on a motor after a defined period of inactivity. 
; Macros:
; $( NAXIS )
;   The number of axis on the controller 1..32 (8 for a typical geobrick, 32 for a full PMAC)
;   This defines the highest numbered axis that may be powered down.  
; $( TM1 )..$( TM32 ) 
;   Define timeout period in milliseconds after which the axis will be powered 
;   down provided it has been idle for the whole period (note clock resolution below).
;   Set to zero to leave the amp powered continously. 
;   Set to one for (almost) immediate power down on motor stop.
;   Set to number of milliseconds for delayed power down after motor stops.
;   Typically this should be set to a few seconds.
; $( DCM1 )..$( DCM2 ) 
;   Drive current & percentage for each axis.
;   Set to zero for axis that are to be killed or if controller is not a geobrick (i.e. does not support Ixx77 amp current).
;   For axis requiring a reduced holding current this contains ' normal_drive_current * 100 + power_down_percentage '
;   Note the drive current is defined in milliamps.
;   e.g. For motor axis 1 with 2000 milliamp drive current and 33% holding current define DCM1 as 200033
;###########################################################


; Define timeout period in milliseconds
P301 = $(TM1)
P302 = $(TM2)
P303 = $(TM3)
P304 = $(TM4)
P305 = $(TM5)
P306 = $(TM6)
P307 = $(TM7)
P308 = $(TM8)
P309 = $(TM9)
P310 = $(TM10)
P311 = $(TM11)
P312 = $(TM12)
P313 = $(TM13)
P314 = $(TM14)
P315 = $(TM15)
P316 = $(TM16)
P317 = $(TM17)
P318 = $(TM18)
P319 = $(TM19)
P320 = $(TM20)
P321 = $(TM21)
P322 = $(TM22)
P323 = $(TM23)
P324 = $(TM24)
P325 = $(TM25)
P326 = $(TM26)
P327 = $(TM27)
P328 = $(TM28)
P329 = $(TM29)
P330 = $(TM30)
P331 = $(TM31)
P332 = $(TM32)

; Drive current & percentage for each axis
P333 = $(DCM1)
P334 = $(DCM2)
P335 = $(DCM3)
P336 = $(DCM4)
P337 = $(DCM5)
P338 = $(DCM6)
P339 = $(DCM7)
P340 = $(DCM8)
P341 = $(DCM9)
P342 = $(DCM10)
P343 = $(DCM11)
P344 = $(DCM12)
P345 = $(DCM13)
P346 = $(DCM14)
P347 = $(DCM15)
P348 = $(DCM16)
P349 = $(DCM17)
P350 = $(DCM18)
P351 = $(DCM19)
P352 = $(DCM20)
P353 = $(DCM21)
P354 = $(DCM22)
P355 = $(DCM23)
P356 = $(DCM24)
P357 = $(DCM25)
P358 = $(DCM26)
P359 = $(DCM27)
P360 = $(DCM28)
P361 = $(DCM29)
P362 = $(DCM30)
P363 = $(DCM31)
P364 = $(DCM32)


; used for storing current axis number
#define axis_number           P300

; defines timeout period in milliseconds (note clock resolution below)
; use axis_number to calculate the P variable to look in to get timeout period.
#define timeout_period        P(P300 + 300)

; defines drive current in milliamps
; use axis_number to calculate the P variable to look in to get drive current & power down percentage.
#define drive_current         P(P300 + 332)

; zero velocity bit Mxx33
#define zero_velocity_bit     M(P300*100 + 33)

; amplifier enabled bit Mxx39
#define amplifier_enabled     M(P300*100 + 39)

; in position bit Mxx40
#define in_position_bit       M(P300*100 + 40)

; amplifier_current Ixx77
#define amplifier_current     I(P300*100 + 77)

; time counters on P365-P396, one per axis
#define time_counter          P(P300 + 364)

; timer3
#define timer3 i(5111+(3&30)*50+3%2)
#define millisec_conversion             8388608/i10

#define kill_axis             &COMMAND"K"
#define full_current          INT(drive_current/100)
#define hold_current          full_current/100*(drive_current%100)

; define clock resolution in milliseconds
#define clock_tick              50

open plc 3
clear

if (timer3 < 0)
	; Run this code once every clock tick
	timer3 = clock_tick * millisec_conversion
	 
	; Check for axis stationary with amp on
	; Loop through all axis
	axis_number = 1
	WHILE(axis_number !> $(NAXIS))
		if (timeout_period>0)
			if (in_position_bit = 1 And zero_velocity_bit = 1 And amplifier_enabled = 1)
				; motor is stationary with amp on
				time_counter = time_counter + clock_tick
				if (time_counter !< timeout_period)
					; motor was stationary and enabled for whole timeout period so kill the motor or reduce amp power
					if (drive_current=0)
						ADDRESS#axis_number
						kill_axis
					else
						; reduce the drive current
                        ; NB this will be written repeatedly every timeout period
						amplifier_current=hold_current
					endif
					time_counter=0
				endif
			else
				; motor not stationary or amp is off so reset the time counter
				time_counter=0
			endif
		endif
		
		axis_number=axis_number+1
	ENDWHILE
endif

; Check for axis moving and increase drive current if necessary
; Loop through all axis
axis_number = 1
WHILE(axis_number !> $(NAXIS))
	if (drive_current!=0)
		if (in_position_bit=0 And zero_velocity_bit=0 And amplifier_enabled = 1)
			if (amplifier_current<full_current)
				amplifier_current=full_current
			endif
		endif
	endif	
	axis_number=axis_number+1
ENDWHILE

CLOSE

enable plc 3
