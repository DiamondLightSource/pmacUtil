#% macro, SPORT, Asyn port for eloss commands 
# usually PMAC_S<n> for pmacs, the name of the pmacAsynIpPort for bricks
#% macro, HOME, Prefix for autohome instance. Defaults to $(P). If unspecified,
# the template contains enough records to keep the motor record happy

include "basic_asyn_motor.template"
include "motor_in_cs.template"

# disable motor when homing
record(calcout, "$(P)$(M):SDIS") {
  field(INPA, "$(HOME=$(P)):HM:HOMING CP")
}

# dummy record in case we aren't homing
record(busy, "$(HOME=$(P)):HM:HOMING") {
}

record(calcout, "$(P)$(M):HMPOSASLO") {
  field(INPA, "$(P)$(M).MRES CP")
  field(INPB, "$(P)$(M):SCALE")  
  field(CALC, "A*B")
  field(OUT, "$(P)$(M):HMPOS.ASLO")
}

# reports position of motor without offset
record(ai, "$(P)$(M):HMPOS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#$(ADDR)P) $(SPORT)")
  field(DESC, "$(DESC)")
  field(SCAN, ".2 second")
  field(SDIS, "$(HOME=$(P)):HM:HOMING")  
  field(DISV, "0")  
  field(PINI, "YES")
  field(PREC, "$(PREC)")
  field(LINR, "LINEAR")
  field(EGU, "$(EGU)")
}

# at startup, tell autohome template about this motor
record(stringout, "$(P)$(M):SETHMPV") {
  field(PINI, "YES")
  field(VAL, "$(P)$(M)")
  field(OUT, "$(HOME=$(P)):HM:M$(ADDR)PV PP")
}

record(stringout, "$(HOME=$(P)):HM:M$(ADDR)PV"){
}

# define a kill record
record(ao, "$(P)$(M):KILL") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto killMotor($(ADDR)) $(SPORT)")  
  field(VAL, "0")  
}

record(calc, "$(P)$(M):ELOSSVAR") {
  field(CALC, "464+$(ADDR)")
  field(PINI, "YES")
}

record(ai, "$(P)$(M):ELOSS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getEloss($(P)$(M)) $(SPORT)")  
  field(SCAN, "5 second")  
}

record(calcout, "$(P)$(M):ELOSSRC") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto resetEloss($(P)$(M)) $(SPORT)") 
  field(DESC, "Write 0 to A to reset Eloss")
  field(CALC, "A")
  field(A, "0")  
}
