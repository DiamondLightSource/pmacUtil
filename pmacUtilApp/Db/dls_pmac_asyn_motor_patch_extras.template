#! Generated by VisualDCT v2.6
#! DBDSTART
#! DBD("../../dbd/pmacUtil.dbd")
#! DBDEND


# Template for a patch panel motor
# Includes extra autosave and archiver tags for resolution fields
# Also includes records to enable/disable limits by setting ixx24 to $40001/$60001

# % autosave 1 MRES ERES RRES
# % archiver 0.5 Monitor ERES
# % archiver 0.5 Monitor RRES
record(motor, "$(P)$(M)") {
}

# Asyn records for communication with
# PMAC
# Set variable ixx24
record(asyn, "$(P)$(M):ASYN:LIMSET") {
  field(SCAN, "Passive")
  field(DTYP, "asynRecordDevice")
  field(PORT, "$(SPORT)")
  field(DESC, "Set PMAC limits flag")
}

# Read variable ixx24
record(asyn, "$(P)$(M):ASYN:LIMGET") {
  field(SCAN, "Passive")
  field(DTYP, "asynRecordDevice")
  field(PORT, "$(SPORT)")
  field(DESC, "Get PMAC limits flag")
  field(AOUT, "i$(ADDR)24")
}

# Create command string to send to
# PMAC
record(scalcout, "$(P)$(M):LIMSTRING") {
  field(DESC, "Setup PMAC command")
  field(DTYP, "Soft Channel")
  field(CALC, "PRINTF('i$(ADDR)24=$%x',A)")
  field(OUT, "$(P)$(M):ASYN:LIMSET.AOUT PP")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
}

# User chooses to enable/disable limits
# via this record
#% autosave 2 VAL
record(bo, "$(P)$(M):SETLIMITS") {
  field(ZNAM, "ENABLE")
  field(ONAM, "DISABLE")
  field(OUT, "$(P)$(M):LIMCALC.A PP")
}

# Parse response from the PMAC (in hex)
record(scalcout, "$(P)$(M):PARSELIM") {
  field(DTYP, "Soft Channel")
  field(CALC, "SSCANF(AA-'$', '%x')")
  field(INAA, "$(P)$(M):ASYN:LIMGET.AINP PP")
  field(DESC, "Parse PMAC response")
}

record(bi, "$(P)$(M):GETLIMITS") {
  field(ZNAM, "ENABLED")
  field(ONAM, "DISABLED")
}

# Set bit 17 to 1 to disable limits, and to 0 to enable them.
# Keep the remaining bits the same. Make sure we read the variable
# again directly so that we don't use stale data.
record(calcout, "$(P)$(M):LIMCALC") {
  field(CALC, "(A)? (1<<17)|B : ~((1<<17))&B")
  field(INPB, "$(P)$(M):PARSELIM PP")
  field(OUT, "$(P)$(M):LIMSTRING.A PP")
  field(DESC, "Calculate new ixx24")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
}

# Check bit 17 to see if limits are enabled
record(calcout, "$(P)$(M):CHECKLIMBIT") {
  field(CALC, "(A>>17)&1")
  field(INPA, "$(P)$(M):PARSELIM PP")
  field(OUT, "$(P)$(M):GETLIMITS PP")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
  field(DESC, "Check limits bit")
  field(SCAN, "1 second")
}

#! Further lines contain data used by VisualDCT
#! View(621,567,1.5)
#! Record("$(P)$(M)",180,471,0,0,"$(P)$(M)")
#! Record("$(P)$(M):ASYN:LIMSET",1440,788,0,0,"$(P)$(M):ASYN:LIMSET")
#! Field("$(P)$(M):ASYN:LIMSET.AOUT",16777215,0,"$(P)$(M):ASYN:LIMSET.AOUT")
#! Record("$(P)$(M):ASYN:LIMGET",1420,514,0,0,"$(P)$(M):ASYN:LIMGET")
#! Field("$(P)$(M):ASYN:LIMGET.AINP",16777215,0,"$(P)$(M):ASYN:LIMGET.AINP")
#! Record("$(P)$(M):LIMSTRING",1140,761,0,0,"$(P)$(M):LIMSTRING")
#! Field("$(P)$(M):LIMSTRING.OUT",16777215,1,"$(P)$(M):LIMSTRING.OUT")
#! Link("$(P)$(M):LIMSTRING.OUT","$(P)$(M):ASYN:LIMSET.AOUT")
#! Field("$(P)$(M):LIMSTRING.A",16777215,0,"$(P)$(M):LIMSTRING.A")
#! Record("$(P)$(M):SETLIMITS",480,802,0,0,"$(P)$(M):SETLIMITS")
#! Field("$(P)$(M):SETLIMITS.OUT",16777215,1,"$(P)$(M):SETLIMITS.OUT")
#! Link("$(P)$(M):SETLIMITS.OUT","$(P)$(M):LIMCALC.A")
#! Record("$(P)$(M):PARSELIM",1140,528,0,1,"$(P)$(M):PARSELIM")
#! Field("$(P)$(M):PARSELIM.INAA",16777215,1,"$(P)$(M):PARSELIM.INAA")
#! Link("$(P)$(M):PARSELIM.INAA","$(P)$(M):ASYN:LIMGET.AINP")
#! Field("$(P)$(M):PARSELIM.VAL",16777215,0,"$(P)$(M):PARSELIM.VAL")
#! Record("$(P)$(M):GETLIMITS",580,596,0,1,"$(P)$(M):GETLIMITS")
#! Field("$(P)$(M):GETLIMITS.VAL",16777215,0,"$(P)$(M):GETLIMITS.VAL")
#! Record("$(P)$(M):LIMCALC",760,741,0,1,"$(P)$(M):LIMCALC")
#! Field("$(P)$(M):LIMCALC.INPB",16777215,1,"$(P)$(M):LIMCALC.INPB")
#! Link("$(P)$(M):LIMCALC.INPB","$(P)$(M):PARSELIM.VAL")
#! Field("$(P)$(M):LIMCALC.A",16777215,0,"$(P)$(M):LIMCALC.A")
#! Field("$(P)$(M):LIMCALC.OUT",16777215,1,"$(P)$(M):LIMCALC.OUT")
#! Link("$(P)$(M):LIMCALC.OUT","$(P)$(M):LIMSTRING.A")
#! Record("$(P)$(M):CHECKLIMBIT",840,507,0,1,"$(P)$(M):CHECKLIMBIT")
#! Field("$(P)$(M):CHECKLIMBIT.INPA",16777215,1,"$(P)$(M):CHECKLIMBIT.INPA")
#! Link("$(P)$(M):CHECKLIMBIT.INPA","$(P)$(M):PARSELIM.VAL")
#! Field("$(P)$(M):CHECKLIMBIT.OUT",16777215,0,"$(P)$(M):CHECKLIMBIT.OUT")
#! Link("$(P)$(M):CHECKLIMBIT.OUT","$(P)$(M):GETLIMITS.VAL")
