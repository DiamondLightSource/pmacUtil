#!$(INSTALL)/bin/$(ARCH)/example

## You may have to change example to something else
## everywhere it appears in this file

cd "$(INSTALL)"

# Load binaries on architectures that need to do so.
# VXWORKS_ONLY, LINUX_ONLY and RTEMS_ONLY are macros that resolve
# to a comment symbol on architectures that are not the current
# build architecture, so they can be used liberally to do architecture
# specific things. Alternatively, you can include an architecture
# specific file.
$(VXWORKS_ONLY)ld < bin/$(ARCH)/example.munch

## This drvTS initializer is needed if the IOC has a hardware event system
#TSinit

## Register all support components
dbLoadDatabase("dbd/example.dbd")
example_registerRecordDeviceDriver(pdbbase)

#########################################################
# Configure real PMAC
#
pmacVmeDebug=1
drvPmacDebug=1
pmacVmeConfig(0, 0x7fa000, 0x700000, 0xC1, 3)
# Startup driver for DPRAM ASCII buffer
pmacDrv()
pmacVmeDebug=0
drvPmacDebug=0

pmacAsynConfig(0, "PMAC_S")

# Initialise the low-level PMAC driver (comms port, comms addr, card, nAxes)
pmacAsynMotorCreate("PMAC_S0", 0, 0, 32)

# Setup the motor Asyn layer (portname, low-level driver drvet name, card, number of axes on card)
drvAsynMotorConfigure("PMAC1", "pmacAsynMotor", 0, 33)

#asynSetTraceMask("PMAC3", 1, 0x11)

# Initialise the co-ordinate systems ( port, addr, cs, ref, program )
pmacAsynCoordCreate("PMAC_S0", 0, 2,  2, 10) 

# Setup coordinate systems (portname, low-level driver drvet name, card, number of axes on card)
drvAsynMotorConfigure("PMAC1CS2", "pmacAsynCoord",  2, 9)

## Load record instances
dbLoadRecords("db/3jackexample.db")

iocInit()


