CLOSE

;####################################################
; Autogenerated Homing PLC for GeoBrick, DO NOT MODIFY
; Axis 5: group = 1, htype = LIMIT, jdist = 0, post = i
; Axis 6: group = 1, htype = LIMIT, jdist = 0, post = i
; Axis 7: group = 1, htype = LIMIT, jdist = 0, post = i
; Axis 8: group = 1, htype = LIMIT, jdist = 0, post = i
;####################################################

; Use a different timer for each PLC
#define timer             i(5111+(11&30)*50+11%2)
; Make timer more readable
#define MilliSeconds      * 8388608/i10

; Homing State P Variable
#define HomingState       P1100
#define StateIdle         0
#define StateConfiguring  1
#define StateMoveNeg      2
#define StateMovePos      3
#define StateHoming       4
#define StatePostHomeMove 5
#define StateAligning     6
#define StateDone         7
#define StateFastSearch   8
#define StateFastRetrace  9
#define StatePreHomeMove  10
HomingState = StateIdle

; Homing Status P Variable
#define HomingStatus      P1101
#define StatusDone        0
#define StatusHoming      1
#define StatusAborted     2
#define StatusTimeout     3
#define StatusFFErr       4
#define StatusLimit       5
#define StatusIncomplete  6
#define StatusInvalid     7
HomingStatus = StatusDone

; Homing Group P Variable
#define HomingGroup       P1102
HomingGroup = 0

; Homing Group Backup P Variable
#define HomingBackupGroup P1103
HomingBackupGroup = 0

OPEN PLC11 CLEAR

HomingStatus = StatusHoming

;---- Configuring State ----
HomingState=StateConfiguring
;Save the Homing group to px03
HomingBackupGroup=HomingGroup
;Save high soft limits to P variables px04..x19
P1104=i513 P1105=i613 P1106=i713 P1107=i813
;Save the low soft limits to P variables px20..x35
P1120=i514 P1121=i614 P1122=i714 P1123=i814
;Save the home capture flags to P variables px36..x51
P1136=i7112 P1137=i7122 P1138=i7132 P1139=i7142
;Store 'not flag' to use in moving off a flag in P variables px52..x67
P1152=P1136^$C P1153=P1137^$C P1154=P1138^$C P1155=P1139^$C
;Save the limit flags to P variables px68..x83
P1168=i524 P1169=i624 P1170=i724 P1171=i824
;Save the current position to P variables px84..x99
P1184=M562 P1185=M662 P1186=M762 P1187=M862
;Clear the soft limits
i513=0 i613=0 i713=0 i813=0
i514=0 i614=0 i714=0 i814=0

if (HomingBackupGroup=1 and HomingStatus=StatusHoming)
	HomingGroup=1

	;---- FastSearch State ----
	if (HomingStatus=StatusHoming)
		HomingState=StateFastSearch
		; Execute the move commands
		m572=100000000*(i523/ABS(i523)) m672=100000000*(i623/ABS(i623)) m772=100000000*(i723/ABS(i723)) m872=100000000*(i823/ABS(i823))
		cmd "#5J^*^0 #6J^*^0 #7J^*^0 #8J^*^0"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m540&m640&m740&m840=0) ; At least one motor should not be In Position
		and (m542|m642|m742|m842=0) ; No following errors should be set for any motor
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (m542|m642|m742|m842=1) ; If a motor hit a following error
			HomingStatus = StatusFFErr
		endif
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

	;---- Store the difference between current pos and start pos ----
	if (HomingStatus=StatusHoming)
		P1184=(P1184-M562)/(I508*32)+0-(i526/16)
		P1185=(P1185-M662)/(I608*32)+0-(i626/16)
		P1186=(P1186-M762)/(I708*32)+0-(i726/16)
		P1187=(P1187-M862)/(I808*32)+0-(i826/16)
	endif

	;---- FastRetrace State ----
	if (HomingStatus=StatusHoming)
		HomingState=StateFastRetrace
		; Execute the move commands
		i7112=P1152 i7122=P1153 i7132=P1154 i7142=P1155 m572=100000000*(-i523/ABS(i523)) m672=100000000*(-i623/ABS(i623)) m772=100000000*(-i723/ABS(i723)) m872=100000000*(-i823/ABS(i823))
		cmd "#5J^*^0 #6J^*^0 #7J^*^0 #8J^*^0"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m540&m640&m740&m840=0) ; At least one motor should not be In Position
		and (m542|m642|m742|m842=0) ; No following errors should be set for any motor
		and (m530|m630|m730|m830=0) ; Should not stop on position limit for selected motors
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (m542|m642|m742|m842=1) ; If a motor hit a following error
			HomingStatus = StatusFFErr
		endif
		if (m530|m630|m730|m830=1) ; If a motor hit a limit
			HomingStatus = StatusLimit
		endif
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

	;---- Check if any limits need disabling ----
	if (HomingStatus=StatusHoming)
		;Save the user home flags to P variables px52..x67
		;NOTE: this overwrites inverse flag (ran out of P vars), so can't use inverse flag after this point
			P1152=i7113 P1153=i7123 P1154=i7133 P1155=i7143
		; if capture on flag, and flag high, then we need to disable limits
		if (P1136&2=2 and P1136&8=0)
			; ix23 (h_vel) should be opposite to ix26 (h_off) and in direction of home flag
			if (P1152=1 and i523>0 and i526<1)
			or (P1152=2 and i523<0 and i526>-1)
				i524=i524 | $20000
			else
				; if it isn't then set it into invalid error
				HomingStatus=StatusInvalid
			endif
		endif
		; if capture on flag, and flag high, then we need to disable limits
		if (P1137&2=2 and P1137&8=0)
			; ix23 (h_vel) should be opposite to ix26 (h_off) and in direction of home flag
			if (P1153=1 and i623>0 and i626<1)
			or (P1153=2 and i623<0 and i626>-1)
				i624=i624 | $20000
			else
				; if it isn't then set it into invalid error
				HomingStatus=StatusInvalid
			endif
		endif
		; if capture on flag, and flag high, then we need to disable limits
		if (P1138&2=2 and P1138&8=0)
			; ix23 (h_vel) should be opposite to ix26 (h_off) and in direction of home flag
			if (P1154=1 and i723>0 and i726<1)
			or (P1154=2 and i723<0 and i726>-1)
				i724=i724 | $20000
			else
				; if it isn't then set it into invalid error
				HomingStatus=StatusInvalid
			endif
		endif
		; if capture on flag, and flag high, then we need to disable limits
		if (P1139&2=2 and P1139&8=0)
			; ix23 (h_vel) should be opposite to ix26 (h_off) and in direction of home flag
			if (P1155=1 and i823>0 and i826<1)
			or (P1155=2 and i823<0 and i826>-1)
				i824=i824 | $20000
			else
				; if it isn't then set it into invalid error
				HomingStatus=StatusInvalid
			endif
		endif
	endif

	;---- Homing State ----
	if (HomingStatus=StatusHoming)
		HomingState=StateHoming
		; Execute the move commands
		i7112=P1136 i7122=P1137 i7132=P1138 i7142=P1139
		cmd "#5hm #6hm #7hm #8hm"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m540&m640&m740&m840=0) ; At least one motor should not be In Position
		and (m542|m642|m742|m842=0) ; No following errors should be set for any motor
		and (m530|m630|m730|m830=0) ; Should not stop on position limit for selected motors
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (m542|m642|m742|m842=1) ; If a motor hit a following error
			HomingStatus = StatusFFErr
		endif
		if (m530|m630|m730|m830=1) ; If a motor hit a limit
			HomingStatus = StatusLimit
		endif
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

	;---- Check if all motors have homed ----
	if (HomingStatus=StatusHoming)
	and (m545&m645&m745&m845=0)
		HomingStatus=StatusIncomplete
	endif

	;---- PostHomeMove State ----
	if (HomingStatus=StatusHoming)
		HomingState=StatePostHomeMove
		; Execute the move commands
		m572=P1184 m672=P1185 m772=P1186 m872=P1187
		cmd "#5J=* #6J=* #7J=* #8J=*"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m540&m640&m740&m840=0) ; At least one motor should not be In Position
		and (m542|m642|m742|m842=0) ; No following errors should be set for any motor
		and (m530|m630|m730|m830=0) ; Should not stop on position limit for selected motors
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (m542|m642|m742|m842=1) ; If a motor hit a following error
			HomingStatus = StatusFFErr
		endif
		if (m530|m630|m730|m830=1) ; If a motor hit a limit
			HomingStatus = StatusLimit
		endif
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

endif

;---- Done ----
if (HomingStatus = StatusHoming)
	;If we've got this far without failing, set status and state done
	HomingStatus=StatusDone
	HomingState=StateDone
	;Restore the homing group from px03
	HomingGroup=HomingBackupGroup
endif

;---- Tidy Up ----
;Stop all motors if they don't have a following error
if (m542=0)
	cmd "#5J/"
endif
if (m642=0)
	cmd "#6J/"
endif
if (m742=0)
	cmd "#7J/"
endif
if (m842=0)
	cmd "#8J/"
endif
;Restore the high soft limits from P variables px04..x19
i513=P1104 i613=P1105 i713=P1106 i813=P1107
;Restore the low soft limits from P variables px20..x35
i514=P1120 i614=P1121 i714=P1122 i814=P1123
;Restore the home capture flags from P variables px36..x51
i7112=P1136 i7122=P1137 i7132=P1138 i7142=P1139
;Restore the limit flags to P variables px68..x83
i524=P1168 i624=P1169 i724=P1170 i824=P1171

DISABLE PLC11
CLOSE
